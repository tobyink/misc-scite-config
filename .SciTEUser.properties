#
# GENERAL
#
properties.directory.enable=1
position.width=700
magnification=0
buffers=64
split.vertical=0
tabbar.visible=1
tabbar.hide.one=1
tabbar.multiline=1
toolbar.visible=0
statusbar.visible=1
line.margin.visible=1
use.monospaced=1
edge.mode=0
save.recent=1
selection.back=#3355ff
selection.alpha=96
menukey.file.exit=<control>Q
open.dialog.in.file.directory=1
find.replace.advanced=1

code.page=65001

#
# TABS
#
tabsize=3
indent.size=3
use.tabs=1
indent.automatic=1
indent.opening=0
indent.closing=0

#
# ASPELL
#
command.name.9.*=Inline Spellcheck
command.9.*=inline_aspell $(FilePath)
command.subsystem.9.*=3
command.mode.9.*=savebefore:yes
ext.lua.startup.script=$(SciteUserHome)/.SciTE/aspell.lua

#command.name.9.*=aspell
#command.9.*=/usr/bin/gnome-terminal -t 'aspell' -e "/usr/bin/aspell check $(FileDir)/$(FileNameExt)"
#command.subsystem.9.*=0
#command.is.filter.9.*=1

#
# JAVASCRIPT
#

command.go.$(file.patterns.js)=tcsh -c "rhino $(FileNameExt)"

#
# PERL
#
file.patterns.perl=*.pl;*.pm;*.pod;*.PL;*.t;*.psgi

api.$(file.patterns.perl)=/home/tai/.SciTE/perl.api

command.compile.$(file.patterns.perl)=tcsh -c "perl -c -w $(FileNameExt)"

command.go.$(file.patterns.perl)=tcsh -c "perl $(FileNameExt)"

command.name.0.$(file.patterns.perl)=Lint
command.0.$(file.patterns.perl)=tcsh -c "perl -MO=Lint,all $(FileNameExt)"

command.name.1.$(file.patterns.perl)=Test Suite
command.1.$(file.patterns.perl)=p5u ap -v

command.name.2.$(file.patterns.perl)=Code Profiler
command.2.$(file.patterns.perl)=tcsh -c "perl -d:DProf $(FileNameExt)"

command.name.3.$(file.patterns.perl)=Profiler Parser
command.3.$(file.patterns.perl)=tcsh -c "dprofpp $(FileDir)/tmon.out"

keywords.$(file.patterns.perl)=\
NULL __FILE__ __LINE__ __PACKAGE__ __DATA__ __END__ AUTOLOAD \
BEGIN CORE DESTROY END EQ GE GT INIT LE LT NE CHECK abs accept \
alarm and atan2 bind binmode bless caller chdir chmod chomp chop \
chown chr chroot close closedir cmp connect continue cos crypt \
dbmclose dbmopen defined delete die do dump each else elsif endgrent \
endhostent endnetent endprotoent endpwent endservent eof eq eval \
exec exists exit exp fcntl fileno flock for foreach fork format \
formline ge getc getgrent getgrgid getgrnam gethostbyaddr gethostbyname \
gethostent getlogin getnetbyaddr getnetbyname getnetent getpeername \
getpgrp getppid getpriority getprotobyname getprotobynumber getprotoent \
getpwent getpwnam getpwuid getservbyname getservbyport getservent \
getsockname getsockopt glob gmtime goto grep gt hex if index \
int ioctl join keys kill last lc lcfirst le length link listen \
local localtime lock log lstat lt map mkdir msgctl msgget msgrcv \
msgsnd my ne next no not oct open opendir or ord our pack package \
pipe pop pos print printf prototype push quotemeta qu \
rand read readdir readline readlink readpipe recv redo \
ref rename require reset return reverse rewinddir rindex rmdir \
scalar seek seekdir select semctl semget semop send setgrent \
sethostent setnetent setpgrp setpriority setprotoent setpwent \
setservent setsockopt shift shmctl shmget shmread shmwrite shutdown \
sin sleep socket socketpair sort splice split sprintf sqrt srand \
stat study sub substr symlink syscall sysopen sysread sysseek \
system syswrite tell telldir tie tied time times truncate \
uc ucfirst umask undef unless unlink unpack unshift untie until \
use utime values vec wait waitpid wantarray warn while write \
xor \
given when default say state UNITCHECK fc \
class role exporter with extends providing using \
fun classmethod method before after around override augment \
has requires excludes blessed try catch true false

#
# NOTATION 3
#
file.patterns.n3=*.ttl;*.n3;*.nt;*.turtle;*.sparql;*.nq
extension.$(file.patterns.n3)=/home/tai/.SciTE/n3.lexer.lua
lexer.$(file.patterns.n3)=script_n3
# Punctuation
style.script_n3.1=$(font.text),fore:#990000,bold
# @keywords
style.script_n3.2=$(font.text),fore:#000000,bold
# Comment
style.script_n3.3=$(font.text),fore:#669933,italics
# is ... of
style.script_n3.4=$(font.text),fore:#000099,italics
# SPARQL
style.script_n3.8=$(font.text),fore:#000000,bold,italics
# Invalid
style.script_n3.9=$(font.text),fore:#ffff00,back:#660000,bold
# URI
style.script_n3.10=$(font.text),fore:#0000cc
# CURIE
style.script_n3.20=$(font.text),fore:#000099,bold
# BNode
style.script_n3.21=$(font.text),fore:#009900,bold
# rdf:type
style.script_n3.22=$(font.text),fore:#000099,bold,italics
# Variable
style.script_n3.24=$(font.text),fore:#009900,bold,italics
# Literal
style.script_n3.25=$(font.text),fore:#cc00cc
# Long literal
style.script_n3.26=$(font.text),fore:#cc00cc,back:#ffddff,italics
# Lang
style.script_n3.27=$(font.text),fore:#ff0000
# Numbers
style.script_n3.28=$(font.text),fore:#cc00cc,bold
# true/false
style.script_n3.29=$(font.text),fore:#cc00cc,bold,italics
# Go = show N-Triples ; Build = show XML ; Compile = save XML
command.go.$(file.patterns.n3)=trapper -i turtle $(FileNameExt)
command.build.$(file.patterns.n3)=trapper -o rdfxml -i turtle $(FileNameExt)
command.compile.$(file.patterns.n3)=trapper -o rdfxml -i turtle $(FileNameExt) >$(FileName).rdf
# Additional commands
command.0.$(file.patterns.n3)=* GET 'http://prefix.cc/$(1).ttl.plain'
command.name.0.$(file.patterns.n3)=prefix.cc lookup
command.mode.0.$(file.patterns.n3)=replaceselection:yes
# Comments
comment.block.script_n3=#

#
# MISC
#
source.files=*.asm;*.c;*.cc;*.cpp;*.cxx;*.cs;*.h;*.hh;*.hxx;*.hpp;\
*.idl;*.odl;*.rc;*.rc2;*.dlg;*.def;\
*.vb;*.vbs;*.bas;*.frm;*.cls;*.ctl;\
*.java;*.js;*.py;*.pl;*.rb;*.cgi;*.lua;*.conf;\
make*;*.mak;\
*.properties;*.html;*.xml;*.iface;*.bat;*.e;\
*.pm;*.php;*.css;*.js;*.ttl;*.xml;*.n3;*.rdf;*.nt

# Define the Lexer menu,
# Each item contains three parts: menu string | file extension | key
# The only keys allowed currently are based on F-keys and alphabetic keys and look like
# [Ctrl+][Shift+][Fn|a] such as F12 or Ctrl+Shift+D.
# A '&' may be placed before a letter to be used as an accelerator. This does not work on GTK+.
menu.language=\
#FreeBasic|bas||\
Text|txt|Shift+F11|\
#Ada|ads||\
Apache Confi&g|conf||\
#Assembler|asm||\
#ASN.1|asn1||\
#Avenue|ave||\
#Baan|bc||\
#&Batch|bat||\
#Bullant|ant||\
&C / C++|c||\
#CMake|cmake||\
#C&#|cs||\
#COBOL|cob||\
#Csound|orc||\
CSS|css||\
#D|d||\
#&Difference|diff||\
#&Eiffel|e||\
#Erlang|erl||\
#&Errorlist|err||\
#FlagShip|prg||\
#Forth|forth||\
#&Fortran|f90||\
#Gap|g||\
H&ypertext|html|F12|\
#&InnoSetup|iss||\
&Java|java||\
Java&Script|js||\
#&Kix|kix||\
#TeX|tex||\
#L#isp|lisp||\
#Lot|lot||\
#Lout|lt||\
Lu&a|lua||\
#Matlab|m.matlab||\
&Makefile|mak|Ctrl+Shift+F11|\
#MetaPost|mp||\
#MMIXAL|mms||\
#&nnCron crontab|tab||\
#NSIS|nsis||\
M&oose|pl||\
Notation &3|n3|Ctrl+Shift+F3|\
#Objective Caml|ml||\
#Octave|m.octave||\
#Opal|impl||\
#Pascal|pas||\
Pe&rl|pl||\
P&HP|php||\
#P&LSQL|spec||\
#P&ostScript|ps||\
#P&OV-Ray SDL|pov||\
#PowerShell|ps1||\
#PowerPro|powerpro||\
#&Properties|properties||\
Pytho&n|py||\
#R|R||\
#Reso&urce|rc||\
Ruby|rb||\
Shell|sh||\
S&QL|sql||\
#Specman|e||\
#&TCL|tcl||\
#&VB|vb||\
#VBScr&ipt|vbs||\
#Verilog|v||\
#VHDL|vhd||\
&XML|xml|Shift+F12|\
YAML|yaml||
